// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: units/units.proto

package units

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Units_GetUnit_FullMethodName = "/units.Units/GetUnit"
)

// UnitsClient is the client API for Units service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UnitsClient interface {
	GetUnit(ctx context.Context, in *UnitInfo, opts ...grpc.CallOption) (*Unit, error)
}

type unitsClient struct {
	cc grpc.ClientConnInterface
}

func NewUnitsClient(cc grpc.ClientConnInterface) UnitsClient {
	return &unitsClient{cc}
}

func (c *unitsClient) GetUnit(ctx context.Context, in *UnitInfo, opts ...grpc.CallOption) (*Unit, error) {
	out := new(Unit)
	err := c.cc.Invoke(ctx, Units_GetUnit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UnitsServer is the server API for Units service.
// All implementations must embed UnimplementedUnitsServer
// for forward compatibility
type UnitsServer interface {
	GetUnit(context.Context, *UnitInfo) (*Unit, error)
	mustEmbedUnimplementedUnitsServer()
}

// UnimplementedUnitsServer must be embedded to have forward compatible implementations.
type UnimplementedUnitsServer struct {
}

func (UnimplementedUnitsServer) GetUnit(context.Context, *UnitInfo) (*Unit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnit not implemented")
}
func (UnimplementedUnitsServer) mustEmbedUnimplementedUnitsServer() {}

// UnsafeUnitsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UnitsServer will
// result in compilation errors.
type UnsafeUnitsServer interface {
	mustEmbedUnimplementedUnitsServer()
}

func RegisterUnitsServer(s grpc.ServiceRegistrar, srv UnitsServer) {
	s.RegisterService(&Units_ServiceDesc, srv)
}

func _Units_GetUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnitInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnitsServer).GetUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Units_GetUnit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnitsServer).GetUnit(ctx, req.(*UnitInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// Units_ServiceDesc is the grpc.ServiceDesc for Units service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Units_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "units.Units",
	HandlerType: (*UnitsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUnit",
			Handler:    _Units_GetUnit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "units/units.proto",
}
