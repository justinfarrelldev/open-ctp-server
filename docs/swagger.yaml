definitions:
  account.Account:
    description: Structure for representing a player account.
    properties:
      email:
        description: Email is the email address of the player.
        type: string
      experience_level:
        allOf:
        - $ref: '#/definitions/account.ExperienceLevel'
        description: ExperienceLevel represents the player's experience level (0=beginner,
          1=easy, 2=medium, 3=hard, 4=very hard, 5=impossible)
      info:
        description: Info contains additional information about the player.
        type: string
      location:
        description: Location indicates the player's real-life location.
        type: string
      name:
        description: Name is the name of the player.
        type: string
    type: object
  account.CreateAccountArgs:
    description: Structure for the account creation request payload.
    properties:
      account:
        allOf:
        - $ref: '#/definitions/account.Account'
        description: The account to create.
      password:
        description: The password for the account to be created
        type: string
    type: object
  account.ExperienceLevel:
    enum:
    - 0
    - 1
    - 2
    - 3
    - 4
    - 5
    type: integer
    x-enum-varnames:
    - Beginner
    - Easy
    - Medium
    - Hard
    - Very_Hard
    - Impossible
  account.GetAccountArgs:
    description: Structure for the account acquisition request payload.
    properties:
      account_id:
        description: The account ID for the account that will be retrieved.
        type: integer
    type: object
  account.UpdateAccountArgs:
    description: Structure for the account update request payload.
    properties:
      account_id:
        description: The account ID for the account that will be updated.
        type: integer
      email:
        description: The new email for the account.
        type: string
      experience_level:
        description: The new experience level for the account.
        type: integer
      info:
        description: The new info for the account.
        type: string
      location:
        description: The new location for the account.
        type: string
      name:
        description: The new name for the account.
        type: string
    type: object
  game.CreateGameArgs:
    description: Structure for the game creation request payload.
    properties:
      password:
        description: |-
          Password is the password for the game.
          This field is required if PasswordProtected is true.
          It must be longer than 6 characters.
        type: string
      password_protected:
        description: |-
          PasswordProtected indicates whether the game is password-protected.
          If true, a password must be provided.
        type: boolean
    type: object
  health.Response:
    properties:
      status:
        example: OK
        type: string
    type: object
info:
  contact:
    email: justinfarrellwebdev@gmail.com
    name: API Support
  description: This is the open-source Call to Power and Call to Power 2 server project.
    This project is not sponsored, maintained or affiliated with Activision.
  title: Open Call to Power Server
paths:
  /account/create_account:
    post:
      consumes:
      - application/json
      description: This endpoint creates a new multiplayer account, protected by a
        password.
      parameters:
      - description: account creation request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/account.CreateAccountArgs'
      produces:
      - application/json
      responses:
        "201":
          description: Account successfully created
          schema:
            type: string
        "400":
          description: Bad Request
          schema: {}
        "403":
          description: Forbidden
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Create a new account
      tags:
      - account
  /account/get_account:
    get:
      consumes:
      - application/json
      description: This endpoint gets a multiplayer account's info.
      parameters:
      - description: account acquisition request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/account.GetAccountArgs'
      produces:
      - application/json
      responses:
        "200":
          description: Account successfully retrieved
          schema:
            $ref: '#/definitions/account.Account'
        "400":
          description: Bad Request
          schema: {}
        "403":
          description: Forbidden
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Gets an account
      tags:
      - account
  /account/update_account:
    put:
      consumes:
      - application/json
      description: This endpoint updates an account's info.
      parameters:
      - description: account update request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/account.UpdateAccountArgs'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated account!
          schema:
            type: string
        "400":
          description: account_id must be specified
          schema:
            type: string
        "500":
          description: 'an error occurred while decoding the request body: <error
            message>'
          schema:
            type: string
      summary: Updates an account
      tags:
      - account
  /game/create_game:
    post:
      consumes:
      - application/json
      description: This endpoint creates a new multiplayer game, optionally protected
        by a password.
      parameters:
      - description: Game creation request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/game.CreateGameArgs'
      produces:
      - application/json
      responses:
        "201":
          description: Game successfully created
          schema:
            type: string
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Create a new game
      tags:
      - game
  /health:
    get:
      consumes:
      - application/json
      description: Returns the status of the service.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/health.Response'
        "500":
          description: Internal Server Error
          schema: {}
      summary: Health check endpoint
      tags:
      - health
swagger: "2.0"
